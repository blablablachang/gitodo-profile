import React from 'react';
import {connect} from 'react-redux';
import {endListAllLineClear, listAllLine_more, listMainBranch} from '../../redux/actions/branchActions';
import Head from 'next/head';
import styles from '../../styles/Home.module.css';
import Header from '../../components/header';
import MainBranchDisplay from '../../components/mainBranchView';
import Footer from '../../components/footer';
import { getLine, getNodesByLine } from '../../api/line';
import { getUser } from '../../api/user';
import Router from 'next/router';

class Home extends React.Component{
  
  constructor(props) {
    super(props);

    this.state = {allLine: [], position: []};
    
    this.handleStore = this.handleStore.bind(this);
    this.handleDraw = this.handleDraw.bind(this);
    this.getAllBranches = this.getAllBranches.bind(this);
    this.checkLogin = this.checkLogin.bind(this);

    this.checkLogin();
  }

  componentDidMount() {
    if(this.props.userId != -1) {
      this.props.listMainBranch(this.props.userId);
      this.getAllBranches(this.props.mainLine, Date.now(), 0);
    }
  }

  render() {
    return (
      <>
      {
      this.props.userId != -1 && 
      <div className={styles.container}>
        <Head>
          <title>GitoDo</title>
          <meta name='description' content='Generated by create next app' />
          <link rel='icon' href='/favicon.ico' />
        </Head>
  
        <Header></Header>
  
        <main className={styles.main + ' bg-gray-100 relative'}>
          <div className='sm:top-28 top-24 lg:right-7 right-2 lg:left-80 left-20 px-10 absolute w-auto'>
            <div className='container flex flex-row mx-auto items-center'>
              <h1 className='text-2xl font-semibold'>Branch</h1>
            </div>
          </div>
          <MainBranchDisplay userId={this.props.userId} onDraw={this.handleDraw} mainLine={this.props.mainLine} allLine={this.props.allLine}></MainBranchDisplay>
        </main>
  
        <Footer></Footer>
      </div>
      }
      </>
    );
  }

  handleDraw(index, line_id, branch_color, x, y) {
    let obj = {index:index, line_id: line_id, branch_color: branch_color, x: x, y: y};
    setTimeout(() => {this.handleStore(obj)}, index * 3);
  }

  handleStore(obj) {
    this.setState({position: [...this.state.position, obj]});
  }

  checkLogin(){
    if(this.props.userId == -1){
      Router.push({
        pathname: '/login',
        query: {},
      }, `/login`);
    }
  }

  getAllBranches(LineObject, comtime, level) {
    if(LineObject == this.props.mainLine) {
      this.props.listAllLineClear();
      this.props.listAllLineMore(LineObject, '0', 'you', LineObject, comtime - 100)
    }
    getNodesByLine(LineObject._id, 0, 1000, 0).then(task => {
      for(let i = 0; i < task.length; i++) {
        if(task[i].branch_line_id) {
          let node = task[i]
          getLine(task[i].branch_line_id[0]).then(Line => {
            getUser(Line.owner).then(res => {
              let owner = res.name;
              this.props.listAllLineMore(Line, node._id, owner, LineObject, comtime + i * Math.pow(1000, 1-level))
            })
            if(Line.contain_branch > 0) {
              this.getAllBranches(Line, comtime + 1, level+1)
            }
          })
        }
      }
    })
  }
}

const mapStateToProps = state => ({
  userId: state.login.userId,
  mainLine: state.branch.mainLine,
  branchLoading: state.branch.branchLoading,
  allLine: state.branch.allLine,
});

const mapDispatchToProps = {
  listMainBranch: listMainBranch,
  listAllLineClear: endListAllLineClear,
  listAllLineMore: listAllLine_more
};

export default connect(mapStateToProps, mapDispatchToProps)(Home);
